@page "/"
@using LearningMaps.Data


@inject NavigationManager Navigation
@inject HttpClient Http
@inject MapsData MapsSvs

<PageTitle>Index</PageTitle>

<div class="overflow-auto d-flex flex-row justify-content-evenly flex-wrap bd-highlight mb-3">
    @if (MapsSvs.MapsDatas is not null)
    {
        <MapsTemplate Items="@(MapsSvs.FiltredMapsData)">
        <MapTemplate Context="map">
                <div class="card me-2 mb-2 text-center shadow-sm" style="width:400px; background-image: linear-gradient(to top, #965a3e,#b97c7c,#cfa6b5,#e1d3e1,#ffffff);">
                <img  src="@(map.images[0].thumbnail)" @onclick="() => NavigateToMap(map)" class="card-img-top h-75" alt="Test">
                <div class="card-body text-white">
                        <p class="card-text">@(map.description)</p>

                        <Button Class="shadow text-white" Style="background-color:darkslategray"
                            Type="ButtonType.Link" To="https://snotesapp.github.io/snoteseditor/" Target="Target.Blank"
                                role="button">
                            Open sNotes
                        </Button>


                        <Button Class="shadow text-white" Style="background-color:darkslategray"
                            Type="ButtonType.Link" To="@map.down_file"
                                role="button">
                            Download sNotes Map
                        </Button>


                </div>
            </div>
           </MapTemplate>
    </MapsTemplate>

    }
    
    
    
</div>


@code{


    protected override async Task OnInitializedAsync()
    {

        if(MapsSvs.MapsDatas is null)
        {
            MapsSvs.MapsDatas = await Http.GetFromJsonAsync<MapData[]>("sample-data/img_dt.json");
            MapsSvs.FiltredMapsData = new List<MapData>(MapsSvs.MapsDatas.OrderByDescending(m => m.map_ID)).ToList();

        }

        MapsSvs.OnChange += StateHasChanged;
    }


    private void NavigateToMap(MapData map)
    {
        //MapsSvs.SelectedMap = map;
        // Navigation.NavigateTo($"/learningmaps/map/{map.map_ID}");

       
        Navigation.NavigateTo(Navigation.BaseUri + $"map?id={map.map_ID}");
    }


    public void Dispose()
    {
        MapsSvs.OnChange -= StateHasChanged;
      
    }
}