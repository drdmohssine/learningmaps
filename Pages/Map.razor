@page "/map"
@page "/learningmaps/map"
@using LearningMaps.Data;
@using System.Reflection;
@using VisNetwork.Blazor
@using VisNetwork.Blazor.Models;
@inject IJSRuntime JSRuntime
@inject MapsData MapsSvs
@inject HttpClient Http
@inject NavigationManager Navigation
@inject NetData netData
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if(MapsSvs.SelectedMap is not null)
{
    <PageTitle>Learning Maps | Explore New Topics and Expand Your Knowledge</PageTitle>
    <HeadContent>
        <meta property="og:url" content="@(Navigation.Uri)" />
        <meta property="og:image" content="@(MapsSvs.SelectedMap.images[0].thumbnail.Replace("m.jpg","l.jpg"))" />
        <meta property="og:description" content="Explore new areas of knowledge with our learning maps. Our website offers a wide range of educational topics, presented in an intuitive and visually appealing format. Whether you're a student or lifelong learner, our maps provide a unique way to enhance your understanding of complex subjects. With engaging content and easy navigation, our learning maps make it easy to discover and explore new ideas. Start your journey of discovery today and unlock your full potential with our learning maps." />


    </HeadContent>

    
    <div class="row justify-content-center ">
        <div class="form-check col-sm-3 text-white ps-1  rounded-1 mx-2" style="background-color:darkslategray;width:150px;">
            <input class="form-check-input ms-0" type="radio" name="flexRadioDefault" id="flexRadioDefault1" checked value="LR" @onchange="(ChangeEventArgs e) => SetDirection(e)">
            <label class="form-check-label ms-1" for="flexRadioDefault1">
                Left To Right
            </label>
        </div>
        <div class="form-check col-sm-3 text-white ps-1  rounded-1 me-2" style="background-color:darkslategray;width:150px;">
            <input class="form-check-input ms-0" type="radio" name="flexRadioDefault" id="flexRadioDefault2" value="UD" @onchange="(ChangeEventArgs e) => SetDirection(e)">
            <label class="form-check-label ms-1" for="flexRadioDefault2">
                Up To Down
            </label>
        </div>

        <div class="form-check col-sm-3 text-white ps-1  rounded-1 me-2" style="background-color:darkslategray;width:150px;">
            <input class="form-check-input ms-0" type="radio" name="flexRadioDefault" id="flexRadioDefault2" value="Cluster" @onchange="(ChangeEventArgs e) => SetLayoutOption(e)">
            <label class="form-check-label ms-1" for="flexRadioDefault2">
                Clusters
            </label>
        </div>

        <button type="button" class="btn col-sm-3 text-white ps-1 pt-0 rounded-1 " style="background-color:darkslategray;width:150px;height:24px" @onclick="RestGraph">
              Reset
        </button>
    </div>
    
    <div class="row shadow" style="width:auto; height:@(Wdimension.Height)px" >
        <Network @ref="netData.network" Id="my-id" Options="netData.EditorConstructionOptions" OnDoubleClick="NetworkOnDoubleClick" Data="@netData.data" class="vis-network-container " style="background-color:inherit;height:inherit ;width:100%" />
    </div>



<div class="col justify-content-center position-absolute top-50 start-0 ms-4" >
  
        <div class="row-auto mb-1" title="Open sNotes">

            <Button Class="shadow text-white sn-tooltip" Style="background-color:darkslategray;"
                Type="ButtonType.Link" To="https://snotesapp.github.io/snoteseditor/" Target="Target.Blank"
                    >
                    <Icon Name="IconName.Link"> 

                    </Icon>
                <span class="px-2 sn-tooltiptext sn-tooltip-snoteapp">Fill this learning map using the student's notes app. </span>
            </Button>

        </div>
        <div class="row-auto mb-1" title="Download sNotes map">
            <Button Class="shadow text-white sn-tooltip" Style="background-color:darkslategray;"
                Type="ButtonType.Link" To="@MapsSvs.SelectedMap.down_file"
                    >
                <Icon Name="IconName.Download" />
                <span class="px-2 sn-tooltiptext sn-tooltip-download">Download the student's notes file.</span>
            </Button>
        </div>

        <div class="row-auto mb-1" title="AllTechPacks">
            <Button Class="shadow text-white" Style="background-color:darkslategray;"
                    Type="ButtonType.Link" To="https://www.facebook.com/AllTechPacks" Target="Target.Blank">
                <Icon Name="IconName.Facebook" />
               
            </Button>
        </div>

      
   


</div>
}


@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public int selectedMapId { get; set; }


    private bool showButtons { get; set; } = false;
    private int initialWidth { get; set; }
    IJSObjectReference _MapJS;
    WindowDimension Wdimension = new();
    Project graphproject;
    int CurrentLevel;
    HttpClient GrphhttpClient = new HttpClient();


    protected override async Task OnInitializedAsync()
    {

        try
        {

            if (MapsSvs.MapsDatas is null)
            {
                Http.BaseAddress = new Uri(Navigation.BaseUri);
                MapConfig mapConfig = await Http.GetFromJsonAsync<MapConfig>("sample-data/mapConfig.json");
                MapData[] mapsdata = await localStorage.GetItemAsync<MapData[]>("Maps");
                MapConfig mapslocalconfig = await localStorage.GetItemAsync<MapConfig>("MapsConf");

                if (mapsdata is null || mapslocalconfig is null || mapslocalconfig.MapVersion < mapConfig.MapVersion)
                {
                    MapsSvs.MapsDatas = await Http.GetFromJsonAsync<MapData[]>("sample-data/img_dt.json");
                    await localStorage.SetItemAsync("Maps", MapsSvs.MapsDatas);
                    await localStorage.SetItemAsync("MapsConf", mapConfig);

                }
                else
                {
                    MapsSvs.MapsDatas = mapsdata;
                }
                MapsSvs.FiltredMapsData = new List<MapData>(MapsSvs.MapsDatas.OrderByDescending(m => m.map_ID)).ToList();

               
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }





        netData.OnChange += StateHasChanged;
        MapsSvs.OnChange += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            MapsSvs.SelectedMap = MapsSvs.FiltredMapsData.Where(m => m.map_ID == selectedMapId).FirstOrDefault();
            foreach (var img in MapsSvs.SelectedMap.images)
            {
                img.Width = Wdimension.Width;
                img.Height = Wdimension.Height;
            }


            netData.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        
        try
        {
            netData.data = new NetworkData();
            netData.nodes = new List<Node>();
            netData.edges = new List<Edge>();
            HttpClient GrphhttpClient = new HttpClient();
            GrphhttpClient.BaseAddress = new Uri("https://raw.githubusercontent.com/");
            graphproject = await GrphhttpClient.GetFromJsonAsync<Project>(MapsSvs.SelectedMap.GraphUrl.Replace("https://raw.githubusercontent.com/", ""));

            graphproject.Packets = graphproject.Packets.Select(pr =>
            {
                pr.Parent = graphproject.Packets.FirstOrDefault(pd => pd.PacketID == pr.ParentID);
                return pr;
            }).ToList();

            Packet firstPacket = graphproject.Packets.FirstOrDefault(p => p.Parent is null);
            if (firstPacket != null)
            {
                Node firstNode = new Node("1", netData.SplitTextToFitWidth(firstPacket.Title, 30), 0, "box")
                    {
                        Shadow = new NodeShadowOption()
                        {
                            Enabled = true,
                        },
                        Font = $"14px arial {netData.fontColor}",
                    };
                netData.nodes.Add(firstNode);

                foreach (Packet packet in graphproject.Packets.Where(p => p.ParentID == firstPacket.PacketID))
                {
                    Node node = new Node()
                        {
                            Id = packet.PacketID.ToString(),
                            Label = netData.SplitTextToFitWidth(packet.Title, 30),
                            Level = packet.Level,
                            Shape = "box",
                            Shadow = new NodeShadowOption()
                            {
                                Enabled = true,
                            },
                            Margin = new NodeMarginOption()
                            {
                                Bottom = 10,
                                Left = 10,
                                Right = 10,
                                Top = 10
                            },
                            Font = $"14px arial {netData.fontColor}",
                        };
                    netData.nodes.Add(node);
                    netData.edges.Add(new Edge(packet.ParentID.ToString(), packet.PacketID.ToString())
                        {
                            Smooth = new EdgeSmoothOptions() { Enabled = false },
                            Arrows = new Arrows { To = new ArrowsOptions { Enabled = true, ScaleFactor = 1 } }
                        });
                }
            }

            CurrentLevel = 2;

            netData.data = new NetworkData
                {
                    Edges = netData.edges,
                    Nodes = netData.nodes
                };

            netData.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            // Handle the exception appropriately
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
          
            try{
                _MapJS = await JSRuntime.InvokeAsync<IJSObjectReference>("import", $"{Navigation.BaseUri}jscode/libraryInterop.js");


                Wdimension = await _MapJS.InvokeAsync<WindowDimension>("getWindowDimensions");
                showButtons = true;

                initialWidth = Wdimension.Width;

                foreach (var img in MapsSvs.SelectedMap.images)
                {
                    img.Width = Wdimension.Width;
                    img.Height = Wdimension.Height;
                }





                StateHasChanged();
            }
            catch (Exception ex)
            {

            }

            
        }




    }

   
   
    private async Task RestGraph()
    {
        try
        {
            netData.data = new NetworkData();
            netData.nodes = new List<Node>();
            netData.edges = new List<Edge>();
            HttpClient GrphhttpClient = new HttpClient();
            GrphhttpClient.BaseAddress = new Uri("https://raw.githubusercontent.com/");
            graphproject = await GrphhttpClient.GetFromJsonAsync<Project>(MapsSvs.SelectedMap.GraphUrl.Replace("https://raw.githubusercontent.com/", ""));

            graphproject.Packets = graphproject.Packets.Select(pr =>
            {
                pr.Parent = graphproject.Packets.FirstOrDefault(pd => pd.PacketID == pr.ParentID);
                return pr;
            }).ToList();

            Packet firstPacket = graphproject.Packets.FirstOrDefault(p => p.Parent is null);
            if (firstPacket != null)
            {
                Node firstNode = new Node("1", netData.SplitTextToFitWidth(firstPacket.Title, 30), 0, "box")
                    {
                        Shadow = new NodeShadowOption()
                        {
                            Enabled = true,
                        },
                        Font = $"14px arial {netData.fontColor}",
                    };
                netData.nodes.Add(firstNode);

                foreach (Packet packet in graphproject.Packets.Where(p => p.ParentID == firstPacket.PacketID))
                {
                    Node node = new Node()
                        {
                            Id = packet.PacketID.ToString(),
                            Label = netData.SplitTextToFitWidth(packet.Title, 30),
                            Level = packet.Level,
                            Shape = "box",
                            Shadow = new NodeShadowOption()
                            {
                                Enabled = true,
                            },
                            Margin = new NodeMarginOption()
                            {
                                Bottom = 10,
                                Left = 10,
                                Right = 10,
                                Top = 10
                            },
                            Font = $"14px arial {netData.fontColor}",
                        };
                    netData.nodes.Add(node);
                    netData.edges.Add(new Edge(packet.ParentID.ToString(), packet.PacketID.ToString())
                        {
                            Smooth = new EdgeSmoothOptions() { Enabled = false },
                            Arrows = new Arrows { To = new ArrowsOptions { Enabled = true, ScaleFactor = 1 } }
                        });
                }
            }

            CurrentLevel = 2;

            netData.data = new NetworkData
                {
                    Edges = netData.edges,
                    Nodes = netData.nodes
                };

            netData.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            // Handle the exception appropriately
        }

    }

    private void OnDoubleClickEvent<T>(string name, T eventArg)
    {
        try
        {



            // Get the type of T
            Type type = typeof(T);

            // Get the property by name
            PropertyInfo propertyInfo = type.GetProperty("Nodes");

            if (propertyInfo != null)
            {


                // Get the value of the property from the object
                object nodesValue = propertyInfo.GetValue(eventArg);

                if (nodesValue is IEnumerable<object> nds && netData.nodes.Any())
                {
                    object firstNode = nds.First();

                    int parentid = Convert.ToInt16(firstNode);

                    List<Packet> packets = graphproject.Packets.Where(p => p.ParentID == parentid).ToList();

                    Packet selectedPacket = graphproject.Packets.Where(p => p.PacketID == parentid).FirstOrDefault();
                    Packet firstChild = graphproject.Packets.Where(pr => pr.ParentID == selectedPacket.PacketID).FirstOrDefault();

                    if(firstChild is not null)
                    {
                        if (packets.Count > 0 && netData.nodes.Where(ni => ni.Id == firstChild.PacketID.ToString()).Count() == 0)
                        {


                            foreach (Packet packet in packets)
                            {

                                if (packet.PacketID > netData.nodes.Count)
                                {


                                    netData.nodes.Add(new Node(packet.PacketID.ToString(), netData.SplitTextToFitWidth(packet.Title, 30), packet.Level, "box")
                                        {
                                            Font = $"14px arial {netData.fontColor}",
                                            Shadow = new NodeShadowOption()
                                            {
                                                Enabled = true,

                                            },
                                        });

                                    netData.edges.Add(new Edge(packet.ParentID.ToString(), packet.PacketID.ToString())
                                        {

                                            Smooth = new EdgeSmoothOptions() { Enabled = false },
                                            Arrows = new Arrows
                                            {
                                                To = new ArrowsOptions { Enabled = true },

                                            }
                                        });
                                }




                            }



                            netData.data = new NetworkData
                                {
                                    Edges = netData.edges,
                                    Nodes = netData.nodes
                                };



                            CurrentLevel = packets[0].Level;

                        }

                    }
                    

                    //  StateHasChanged();




                }
                else
                {
                    Console.WriteLine("No nodes found or property is not an enumerable.");
                }
            }
            else
            {
                Console.WriteLine("Property not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


    }

    private void NetworkOnDoubleClick(ClickEvent eventArg) => OnDoubleClickEvent("doubleClick", eventArg);

    private async Task SetDirection(ChangeEventArgs eventArgs)
    {
        if(eventArgs.Value.ToString() == "UD")
        {
            await netData.network.SetOptions(new NetworkOptions()
                {
                    Layout = new LayoutOptions()
                    {
                        Hierarchical = new HierarchicalOptions()
                        {
                            Direction = eventArgs.Value.ToString(),
                            SortMethod = "directed",
                            ShakeTowards = "leaves",
                            ParentCentralization = true,
                            LevelSeparation = 300
                        }

                    },

                    Physics = new PhysicsOptions()
                    {
                        //Enabled = false
                        BarnesHut = new BarnesHutOption()
                        {

                            AvoidOverlap = 1,
                            Damping = 1,
                        },

                        HierarchicalRepulsion = new HierarchicalRepulsionOption()
                        {
                            AvoidOverlap = 1,
                            Damping = 1,
                            NodeDistance = 120
                        }
                    }

                }

                );

        }
        else
        {
            await netData.network.SetOptions(new NetworkOptions()
                {
                    Layout = new LayoutOptions()
                    {
                        Hierarchical = new HierarchicalOptions()
                        {
                            Direction = eventArgs.Value.ToString(),
                            SortMethod = "directed",
                            ShakeTowards = "leaves",
                            ParentCentralization = true,
                            LevelSeparation = 300
                        }

                    },

                    Physics = new PhysicsOptions()
                    {
                        //Enabled = false
                        BarnesHut = new BarnesHutOption()
                        {

                            AvoidOverlap = 1,
                            Damping = 1,
                        },

                        HierarchicalRepulsion = new HierarchicalRepulsionOption()
                        {
                            AvoidOverlap = 1,
                            Damping = 1,
                            NodeDistance = 60
                        }
                    }

                }

       );

        }

        
        netData.NotifyStateChanged();
    }

    private async Task SetLayoutOption(ChangeEventArgs eventArgs)
    {
        await netData.network.SetOptions(new NetworkOptions()
            {

                Layout = new LayoutOptions()
                {
                    Hierarchical = new HierarchicalOptions()
                    {
                        Enabled = false
                    }
                },
                Physics = new PhysicsOptions()
                {
                    //Enabled = false
                    BarnesHut = new BarnesHutOption()
                    {
                        SpringLength = 200,
                        AvoidOverlap = 1,
                        Damping = 1,
                    }
                }
            }

        );


    }


    public void Dispose()
    {
        MapsSvs.OnChange -= StateHasChanged;
        netData.OnChange -= StateHasChanged;
    }

    public class WindowDimension
    {
        public WindowDimension()
        {

            Width = 1024;
            Height = 800;

        }
        public int Width { get; set; }
        public int Height { get; set; }


    }
}
