@page "/"
@using LearningMaps.Data


@inject NavigationManager Navigation
@inject HttpClient Http
@inject MapsData MapsSvs
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<PageTitle>Learning Maps | Explore New Topics and Expand Your Knowledge</PageTitle>
@if (MapsSvs.FiltredMapsData is not null)
{
    
    <HeadContent>
        <meta property="og:url" content="@(Navigation.Uri)" />
        <meta property="og:description" content="Explore new areas of knowledge with our learning maps. Our website offers a wide range of educational topics, presented in an intuitive and visually appealing format. Whether you're a student or lifelong learner, our maps provide a unique way to enhance your understanding of complex subjects. With engaging content and easy navigation, our learning maps make it easy to discover and explore new ideas. Start your journey of discovery today and unlock your full potential with our learning maps." />
   
    </HeadContent>

}

<div class="col ">
    @if (MapsSvs.MapsDatas is not null)
    {
        <div class="d-flex flex-row justify-content-evenly flex-wrap bd-highlight  mb-3" >
            <MapsTemplate Items="@(MapsSvs.PageFiltredMapsData)">
        <MapTemplate Context="map">
                <div class="card me-2 mb-2 text-center shadow-sm " style="width:400px; background-image: linear-gradient(to top, #965a3e,#b97c7c,#cfa6b5,#e1d3e1,#ffffff);">
                    <div class="card-header">
                        @(map.title)
                    </div>

             <div class="card-img-top">
                       
                        <img src="@(map.images[0].thumbnail)" @onclick="() => NavigateToMap(map)" class="card-img-top " style="height:255px">

             </div>
                   <div class="card-body text-white" >
                        <p class="card-text">@(map.description)</p>

                   


                </div>

                <div class="card-footer">
                        <Button Class="shadow text-light mb-1" Style="background-color:darkslategray;width:170px;font-size:small;font-weight:bold;"
                            Type="ButtonType.Link" To="https://snotesapp.github.io/snoteseditor/" Target="Target.Blank">
                            Open sNotes
                        </Button>


                        <a class="btn shadow text-white mb-1" 
                            style="background-color:darkslategray;width:170px;font-size:small;font-weight:bold;" 
                            href="@(map.down_file)" 
                            role="button">
                                Download sNotes Map                    
                        </a>

                </div>
            </div>
           </MapTemplate>
    </MapsTemplate>
       
        </div>

        @if (MapsSvs.FiltredMapsData.Count > 8)
        {
            <div class="row ">
                <Pagination PageChanged="OnPageChangedAsync"
                            Alignment="Alignment.Center"
                            ActivePageNumber="@currentPageNumber"
                            TotalPages="@((int)Math.Ceiling((double)MapsSvs.FiltredMapsData.Count / 8))"
                            DisplayPages="3"
                            FirstLinkIcon="IconName.ChevronDoubleLeft"
                            PreviousLinkIcon="IconName.ChevronLeft"
                            NextLinkIcon="IconName.ChevronRight"
                            LastLinkIcon="IconName.ChevronDoubleRight" />
            </div>

        }
        
    }
    
    
    
</div>


@code{


    protected override async Task OnInitializedAsync()
    {

        if(MapsSvs.MapsDatas is null)
        {

            MapConfig mapConfig = await Http.GetFromJsonAsync<MapConfig>("sample-data/mapConfig.json");
            MapData[] mapsdata = await localStorage.GetItemAsync<MapData[]>("Maps");
            MapConfig mapslocalconfig = await localStorage.GetItemAsync<MapConfig>("MapsConf");

            if (mapsdata is null || mapslocalconfig is null || mapslocalconfig.MapVersion < mapConfig.MapVersion )
            {
                MapsSvs.MapsDatas = await Http.GetFromJsonAsync<MapData[]>("sample-data/img_dt.json");
                await localStorage.SetItemAsync("Maps", MapsSvs.MapsDatas);
                await localStorage.SetItemAsync("MapsConf", mapConfig);

            }
            else
            {
                MapsSvs.MapsDatas = mapsdata;
            }
            MapsSvs.FiltredMapsData = new List<MapData>(MapsSvs.MapsDatas.OrderByDescending(m => m.map_ID)).ToList();
            MapsSvs.PageFiltredMapsData = MapsSvs.FiltredMapsData.Take(8).ToList();
        }

        MapsSvs.OnChange += StateHasChanged;
    }


    int currentPageNumber = 1;
    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { currentPageNumber = newPageNumber; });
        MapsSvs.PageFiltredMapsData = MapsSvs.FiltredMapsData.Skip((currentPageNumber - 1) * 8).Take(8).ToList();

        StateHasChanged();
    }

    private void NavigateToMap(MapData map)
    {
        //MapsSvs.SelectedMap = map;
        // Navigation.NavigateTo($"/learningmaps/map/{map.map_ID}");

       
        Navigation.NavigateTo(Navigation.BaseUri + $"map?id={map.map_ID}");
    }


    public void Dispose()
    {
        MapsSvs.OnChange -= StateHasChanged;
      
    }
}