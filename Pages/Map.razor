@page "/map"
@page "/learningmaps/map"
@using LearningMaps.Data;
@inject IJSRuntime JSRuntime
@inject MapsData MapsSvs
@inject HttpClient Http
@inject NavigationManager Navigation

@if(MapsSvs.SelectedMap is not null)
{
    <PageTitle>Learning Maps</PageTitle>
    <HeadContent>
        <meta property="og:url" content="@(Navigation.Uri)" />
        <meta property="og:image" content="@(MapsSvs.SelectedMap.images[0].thumbnail.Replace("m.jpg","l.jpg"))" />
    </HeadContent>

}

<div class="container-fluid  overflow-auto mb-2 position-relative shadow-sm ">
   

    @if (showButtons)
    {
        <div class="position-absolute" style="display:inline-block;top:10px;left:20px; ">
            <Button Color="ButtonColor.Secondary" Class="me-0 p-0"
                Style="width:24px;height:24px;"
                @onclick="()=>{Wdimension.Width +=50; }"
                    role="button">
                <Icon Name="IconName.ZoomIn" />
            </Button>
            <Button Color="ButtonColor.Secondary" Class="p-0 me-0"
                Style="width:24px;height:24px;"
                @onclick="()=>{Wdimension.Width -=50; }"
                    role="button">
                <Icon Name="IconName.ZoomOut" />
            </Button>
            <Button Color="ButtonColor.Secondary" Class="p-0"
                Style="width:24px;height:24px;"
                @onclick="()=>{Wdimension.Width =initialWidth; }"
                    role="button">
                <Icon Name="IconName.Square" />
            </Button>
        </div>

    }
   
    @if (MapsSvs.SelectedMap is not null)
    {
        <img style="width:@(Wdimension.Width-100)px;height:auto" src="@(MapsSvs.SelectedMap.images[0].bigImg)" class=" rounded" alt="test">

    }
   
 

</div>

<div class="row justify-content-center">
    @if (MapsSvs.SelectedMap is not null)
    {
        <div class="col-auto">
            <Button Class="shadow text-white" Style="background-color:darkslategray"
                Type="ButtonType.Link" To="https://snotesapp.github.io/snoteseditor/" Target="Target.Blank"
                    role="button">
                Open sNotes
            </Button>

        </div>
        <div class="col-auto">
            <Button Class="shadow text-white" Style="background-color:darkslategray"
                Type="ButtonType.Link" To="@MapsSvs.SelectedMap.down_file"
                    role="button">
                Download sNotes Map
            </Button>
        </div>

      
    }


</div>


@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public int selectedMapId { get; set; }


    private bool showButtons { get; set; } = false;
    private int initialWidth { get; set; }
    IJSObjectReference _MapJS;
    WindowDimension Wdimension = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _MapJS = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./jscode/libraryInterop.js");


            Wdimension = await _MapJS.InvokeAsync<WindowDimension>("getWindowDimensions");
            showButtons = true;
            StateHasChanged();
            initialWidth = Wdimension.Width;
        }
    }
    protected override void OnParametersSet()
    {
        MapsSvs.SelectedMap = MapsSvs.FiltredMapsData.Where(m => m.map_ID == selectedMapId).FirstOrDefault();


    }

    protected override async Task OnInitializedAsync()
    {

        if (MapsSvs.MapsDatas is null)
        {
            await Task.Delay(200);
            MapsSvs.MapsDatas = await Http.GetFromJsonAsync<MapData[]>("sample-data/img_dt.json");
            MapsSvs.FiltredMapsData = new List<MapData>(MapsSvs.MapsDatas.OrderByDescending(m => m.map_ID)).ToList();
            await Task.Delay(200);
        }

        MapsSvs.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        MapsSvs.OnChange -= StateHasChanged;

    }

    public class WindowDimension
    {
        public WindowDimension()
        {

            Width = 1024;
            Height = 800;

        }
        public int Width { get; set; }
        public int Height { get; set; }


    }
}
